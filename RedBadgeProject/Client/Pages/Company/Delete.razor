@page "/company/delete/{CompanyId:int}"
@using RedBadgeProject.Shared.Models.Company
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigation

<h3>Delete company #@CompanyId?</h3>

@if (Message != null)
{
    <h2 class="text-danger">@Message</h2>
}

@if (Company != null)
{
    <div class="container">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <span><h4><strong>@Company.Name</strong></h4></span>
            </div>
            <div class="card-body">
                <p class="card-text">CompanyId: @Company.LocationId</p>
                <p class="card-text">Company name: @Company.Location</p>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            <div class="text-center justify-content-between w-50">
                <a href="@($"/company")" class="btn btn-outline-primary">Back to Index</a>
                <a href="#" @onclick="HandleClick" class="btn btn-danger text-white">Delete company</a>
            </div>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int CompanyId {get; set;}
    public CompanyDetail? Company {get; set;}
    public string? Message {get; set;}

    protected override async Task OnInitializedAsync()
    {
        Company = await Http.GetFromJsonAsync<CompanyDetail>($"/api/company/{CompanyId}");
    }

    private async void HandleClick()
    {
        var deleteRes = await Http.DeleteAsync($"/api/company/{CompanyId}");

        if (deleteRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/company");
        }
        else
        {
            Message = "Failed to delete company.";
        }
    }
}