@page "/vehicle/edit/{VehicleId:int}"
@using RedBadgeProject.Shared.Models.Vehicle
@attribute [Authorize]
@inject HttpClient Http
@using RedBadgeProject.Shared.Models.Company
@inject NavigationManager navigation

<h3>Edit Vehicle: @model.Name</h3>

@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}

@if (companies == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div class="container">
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="form-group">
                <label>Name</label>
                <InputText class="form-control" @bind-Value="model.Name"/>
            </div>

            <label>Company</label>
            <InputSelect class="form-control" @bind-Value="model.CompanyId">
                @foreach (var company in companies)
                {
                    <option value="@company.Id">@company.Name</option>
                }
            </InputSelect>

            <div class="form-group">
                <label>Capacity</label>
                <InputNumber class="form-control" @bind-Value="model.Capacity"/>
            </div>

            <div class="d-flex justify-content-center mt-3">
                <button type="submit" class="btn btn-primary btn-block mt-5">submit</button>
            </div>
            <a href="@($"/vehicle")">Back to Index</a>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public int VehicleId {get; set;}

    private VehicleEdit model = new();
    private IEnumerable<CompanyDetail> companies {get; set;}
    private string? errorMessage {get; set;}

    protected override async Task OnInitializedAsync()
    {
        model = await Http.GetFromJsonAsync<VehicleEdit>($"/api/vehicle/{VehicleId}");
        companies = await Http.GetFromJsonAsync<IEnumerable<CompanyDetail>>("/api/company");
    }

    private async void HandleSubmit()
    {
        var editRes = await Http.PutAsJsonAsync<VehicleEdit>($"/api/vehicle/edit/{VehicleId}", model);
        if (editRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/vehicle/{VehicleId}");
        }
        else
        {
            errorMessage = "Could not edit vehicle right now.";
        }
    }
}