@page "/staff/delete/{StaffId:int}"
@using RedBadgeProject.Shared.Models.Staff
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigation

<h3>Delete staff #@StaffId?</h3>

@if (Message != null)
{
    <h2 class="text-danger">@Message</h2>
}

@if (Staff != null)
{
    <div class="container">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <span><h4><strong>@Staff.Name</strong></h4></span>
            </div>
            <div class="card-body">
                <p class="card-text">CompanyId: @Staff.CompanyId</p>
                <p class="card-text">Company name: @Staff.Company</p>
                <p class="card-text">Capacity: @Staff.CurrentLocationId</p>
                <p class="card-text">Capacity: @Staff.Location</p>
                <p class="card-text">Capacity: @Staff.RoleId</p>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            <div class="text-center justify-content-between w-50">
                <a href="@($"/staff")" class="btn btn-outline-primary">Back to Index</a>
                <a href="#" @onclick="HandleClick" class="btn btn-danger text-white">Delete staff</a>
            </div>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int StaffId {get; set;}
    public StaffDetail? Staff {get; set;}
    public string? Message {get; set;}

    protected override async Task OnInitializedAsync()
    {
        Staff = await Http.GetFromJsonAsync<StaffDetail>($"/api/staff/{StaffId}");
    }

    private async void HandleClick()
    {
        var deleteRes = await Http.DeleteAsync($"/api/staff/{StaffId}");

        if (deleteRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/staff");
        }
        else
        {
            Message = "Failed to delete staff.";
        }
    }
}